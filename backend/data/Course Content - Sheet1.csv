Week,Index,Type,Title,YouTube Link,Transcript
1,1,Video,Introduction,https://www.youtube.com/embed/8ndsDXohLMQ,"We have taken up BSc in programming and data sciences and let us pick the word programming from there and ask this question, what is programming all about. Why do programming? Programming is all about, let us say you go to a place, new country, namely Germany, and to talk to people in Germany you may want to know German, go to France, you got to know French to speak to people in France. You come to India, there are so many languages spoken here, but then you can manage with Hindi and English to a very good extent. So, if you want to talk to a computer you should know a language and just like the languages of our country India, there are umpteen number of languages, there are so many languages in computer science and we chose to teach you Python particularly for a simple reason, that this language called Python is today very widely spoken, number 1. Number 2, it is very easy to learn and number 3, it is very powerful. Today we are in 2021, where programming with time should intuitively become difficult to learn, back in 1970s and today computers have advanced tremendously but if you observe the effort involved in learning a programming language has diminished tremendously in the sense that it has, it is very easy for one to start learning how to code. I would say back then in the 80s or 90s, coding was not very easy, Pascal, COBOL, C, C plus plus, it would take a few weeks if not months to start writing code and write some not so straightforward code would take at least a few weeks of practice but today with Python you can learn programming in less than a few hours according to me. In fact, we will teach you, you will be seeing that you will be coding from the very first minute of this session, I mean as we progress the classes. So, why programming? You need to learn a language to communicate with your computer. And why do you choose Python? We chose Python because Python is powerful, easy to understand and very much spoken. So, coming to the word programming once again, programming we think is fun and you will see that readily as we progress with the classes. Programming is fun because you get to talk to the computer to do complex things really fast. There are three things here you may want to note, one is you talk to the computer, you make a computer understand to do seemingly complex things and really fast, by really fast, I mean, really-really fast. You will see that things that humans do with a lot of effort and time is done in a fraction of second, sometimes even at the speed of sound or even light for that matter. So, we will go very slowly, we will go step by step, we will assume nothing from you, except maybe basic English understanding. We will not assume any computer science knowledge from your end, we will start diving into our first program in our very first session that is coming ahead. Assume you want to learn how to drive a car, what would you do today? You would probably open YouTube videos and start watching on the basics of driving a car or maybe you will rent a book, buy a book and start reading it, or even browse an article on how to drive? As you know none of these will be of great help. So, to learn a car, learn how to drive a car you probably should hold the steering and keep your feet on the pedal and start driving, probably slowly though, but you should start driving. The point is you cannot be reading books and trying to theoretically understand how to drive a car but never drive a car. It does not help. Of course, theoretical knowledge helps to some extent to begin with but then your real learning starts when you hold the steering. On very analogously speaking, programming also starts when you start touching the keyboard and start coding than keep reading what is programming all about. So, we urge, we push, we want to request you all to start coding alongside with us as we open the terminal and then teach you how to program. The whole of this course will mostly be with the terminal and with me and Omkar, trying to code and tell you what is what and we will take you step by step incrementally and we suggest that you keep your terminal open and code with us. So, during the first week of the course, we are going to keep it bare minimum and very simple. All we will be doing is code not beyond, let us say half a page size, so I will be explaining what I am typing and I will be telling you what the output is and also I will be showing you the output and we will be coding very-very slowly. In fact, if you know programming you may even find it a little repetitive and even maybe boring but then please bear with us, with time you will see the pace pickup. But a word of advice, we would like to see you also open a terminal and code alongside as we are coding."
1,2,Video,Introduction to Replit,https://www.youtube.com/embed/NgZZ0HIUqbs,"So, let us dive in and write our first program.  Programming was not as easy as it is in 2021, thanks to the internet we do not have to install  anything before starting to code. So, what do you see? I have now opened my browser, let me just  zoom in just so that it is clear to you all and I am typing Replit.com, R-E-P-L-I-T.com. And then you will see this. The moment you see this click on Start coding and then it  will ask for a user name and password, if you have a Gmail ID, just click on this G and  log into your Gmail ID and you will be getting a window like, a screen like this.  Go to this plus symbol, click on it, what is the language that you would  like to code in, Python obviously, click on Python and then here you will  get a name that is machine given. It is generally a combination of words, random  combination of words. So, what I will do is I will remove it and then give it a name first code and  then create on create R-E-P-L. So, I click on it, this is a repository that gets created. Do not  break your head about what is a repository, it is just a place where you can come and code and  as you can see, you can in fact, see some examples by clicking here. Let us do that. Here are some example codes, but it is a little confusing to see it on your first day  of programming. So, let us try coding something from our hands. Let me say print hello, just hello and once I type something here, you will see things are self-explanatory,  I will not explain, come here and click on run and you will see hello here. Now, your question would be what just happened? You say something here and the same word came  here. I mean, what is the big deal? What are we into? So, the point is this is the place where  you will type your, you can call it commands, and this is the place where your computer will  execute them and show you the result of what you have typed here. Just in case you typed, instead  of hello you typed Namaste, and then click on run, it will show you Namaste. If you say Namaste India and then click on run, it will show Namaste India , so the nutshell all you do is you type your commands here and you get the output here. You can  type more print commands, this is the second line and you will indeed get Namaste India in the first  line and then this is the second line . You can type whatever you want, put dots here or put some  special symbols and you will see them here. Let us do a small piece of code that is not  simply printing some English statements. Let me delete this and simply type one star, see what  happens, let me not explain what I am doing, it again should be self-explanatory. So, what am I doing? I type two stars in the second line, three stars in the third  line, as I run this I will get this. We keep doing this assuming I have a lot of time  this evening, I can keep typing, this five lines and then sixth line is six stars,  seventh line is seven stars. Then run, you will get precisely what you have  typed. It is sort of has a staircase effect as you can see, correct? And let me continue this  8, 9 and 10. Looking at the pattern you see, I should have included 9 stars here, but I have  included 2 stars more, making it 10 stars. If I run look at this the computer will  obviously not know that it should display the 9 stars here and not 10, simply because you  have specified 10 stars here. The point to note is that your computer does precisely what you ask  your computer to do. If you ask it to display a hash at the end, it will simply display a hash  at the end as you can see. Print I don't know what to type , then run it, it will simply say, I don't know what to type as simple as that. So, this is a gentle introduction,  a very quick introduction to Python and the simplest way to start  typing your code and the simplest code is, of course, your print statement. I  just now showed you how you can type something here and execute the same by clicking  on run command and the executed code appears on the screen right here. This should be enough to  begin with, you can go ahead and try exploring whatever you want to explore. Before I conclude let me try to display this stars in the reverse order. What do I mean by that?  three stars, let us say space space star, give me a minute, you will understand what I am  trying to do, space star star and star star star. What do you think this will display? Exactly the  same thing but in the reverse order. Wonderful! Now, what if I want to display four lines? Understand a small issue here. I cannot simply put four here. I  should put one space extra here, one extra space here and one extra space  here, do you see, do you see that I clicked on run and I got the output, a  beautiful staircase effect, but in the staircase effect, but in the reverse direction.  But do you observe something? It is not as easy as the previous program where you simply typed one  star in the first line, two in the second line, three in the third line, fourth in the fourth  line, it is a little more involved than that. To make your life even more difficult, rather  I am making my life difficult here, not yours. I am sure when you type start typing your piece  of code your life will become difficult as well. You see for five I should again go  and push these things by one space run and here I am. And assuming I did that for  about 10 lines and the 11th line will involve me going up and then putting space to all the lines  above, oh, it is going to be some hard work if you are going to do this for like 20 lines. I stop here with a question - Is there any way we can automate this? Of course, we are a couple of  weeks ahead with this question, rather I am asking this question couple of weeks ahead, but let us  wait and watch if there is a nice way to display this by coding something really nice here, in  just three to four lines, so let us wait for the forthcoming weeks where we take you on our  journey of automating things using programming."
1,3,Video,"L1.3: More on Replit, print and Common Mistakes",https://www.youtube.com/embed/As7_aq6XGfI,"Hello Python students. In this lecture we will see  some more features of Replit and print command. Also we will see some common mistakes one may do  while writing a Python program. Let us start with the different features of Replit. If you observe  the left side panel, you will see various icons available over here. Each icon represent a different feature of Replit. Let us first focus on this first icon, which is files . Inside files you can see there are two different options at the top called add file and add folder. These two options will allow you to manage your programs in more systematic  way. For example, we can add a new file. Let us name it new program dot py. You can always  go back to the previous file or you can write in your newly created file. Similarly, we can also  create one folder. Let us call it week 1. Also we can organize these files by simply  dragging them inside week 1 folder. So, inside week 1, we have new program dot py as  you can see over here at the top. Similarly, we can keep adding such files in a folder or  outside the folder. This particular feature of Replit allows us to create multiple programs  and organize them in a systematic manner. Next it has many features like version  control, packages, home secrets, settings, databases, unit tests. But  for now we will explore only one part of it, which is settings. So, if you go to settings the first is layout, the default layout is side by side, but we  can always change it to stacked. It will bring the place where we write the program at the top whereas the console where we see the output at the bottom. Also it has two different themes,  which is light or it can be dark. Similarly, we can change the font size and so on. There is one more interesting feature which you all must explore, which is this  last option code intelligence. Let us see the difference between disabled and enabled code intelligence feature. Let me type print command currently it is not showing any information  regarding this particular command. Let us enable this code intelligence feature and retype this print command. If you observe, we are getting  various different options and it also provides the detailed information of  this particular print command. We will explore all these options in detail as we go on, but for  now you can read this information, which will help you to understand this particular command. These many features of Replit are sufficient for now. Let us move to Python program. If you remember in last lecture you have studied a print command where you print something like  this hello India and executed the program. Now, I have one question for all of you - Is it  necessary to print only one string at a time? What if I want to print hello India as well  as hello world in a single print statement? Can we do that? Definitely, it is  possible, we can write two different strings or two different messages in the  same print command separated by comma, hello world . Let us execute this, as you can see it is possible to print different  messages using a simple print statement separated by comma. Similarly, we can add one more command  as well, hi Python students . As you can see it is printing all three messages one after the  another in that same order, which means the order is very important. The first message gets  printed first, the second message appears next to it and then the third message and so on. So, print is pretty flexible with respect to this where we can print one message at a time or  it also allows us to print multiple messages. Let us ask one more question - Is it  necessary to print only messages over here or can we print some numbers as  well? What if I write something like print 10, what will happen if I write print  10? It prints the number 10 as it is. Which indicates that it is not necessary that we  only have to type messages using letters from a to z, we can also print numbers using print. Now, you all must be thinking is it necessary to print only whole numbers or can we print  fractional numbers as well. Let us try it 20.5. Let us execute, yes, we can we can print  strings, we can print whole numbers or we can print fractional numbers using print. Now the next obvious question arises is can we combine all these three things together?  Let us try that, let us replace this with 10 and this with 20.5. Let us remove  this. Let us try to execute, yes, we can hello india, 10, 20.5.  So, we can conclude that print command can be used to print multiple messages  or multiple values at the same time. Also it allows us to print string whole numbers  as well as fractional numbers together. Now, let us look into the second part of  this particular lecture, which is some common mistakes which you may do while writing the python  program even with as simple statement as print. Let us look into those common mistakes. Print,  first the spelling of word print might be wrong, which is kind of obvious, but the next part  is more critical, you may think all brackets are same, but when it comes to programming  each bracket has a specific meaning. Usually after print, we use a round bracket.  Now, is it necessary to use round bracket or can we use some other type of a  bracket. Let us try it square bracket, hi, it shows an error message, which  means square bracket is not allowed. Let us try a curly bracket, still an error  message. Let us try angular brackets, again error message, which means in Python,  along with print we must use round brackets. We always type whatever message we want  to print in these single quotes. Is it necessary to have these quotes? Let us try, error  message, which means the quotes are required. Now, the next question is it necessary to have  single quotes or can we use double quotes as well, like this? What do you think whether the  program will execute or it will not? Let us try, it executes, which means Python is  very strict when it comes to brackets, but it is very flexible when it comes to these quotes. We  can use double quotes or we can use single quotes both works correctly, only requirement is if  you open double quotes, then you must close with double quotes and if you open single quotes then  you must close with single quotes. A combination of single and double quotes will not work. All these various constraints of a language is generally referred as syntax, which defines how  a particular code has to be written in a specific language. Thank you for watching  this lecture. Happy learning!"
1,4,Video,L1.4: A Quick Introduction to Variables,https://www.youtube.com/embed/Yg6xzi2ie5s,"Let us get back to our print command and type  this statement, as you can see I say print 10, when I execute this I see that 10 is being  printed, displayed. Now, look at the small modification that I do. I remove this 10 here,  just above the print statement, I say a equals 10, and then I include print a and what does this  do? In mathematics we have observed this, we always declare a variable, we say let us call  a variable; let us assign the value 10 to it. A computer also sees this as the letter a is  assigned the value 10 and you are printing a, which means whatever is assigned to this  variable, will be printed here, as simple as that. So, when I execute this I continue  to get 10, here as you can see. Now, if I were to say b equals 20 and then when  I say print b, let me execute this. I get print a, a gets printed here, print  b, b gets printed here, which is 20. So, that is it, pretty self-explanatory.  What is the big deal about it? Now, look at this. I will say print a plus b, so  here is a plus b and then I say print a into b, I get a into b, which is 200, 10 times  200. Now, let me delete all these things start afresh. I will say a equals 10 as before and say print a, look at this, this is slightly  counter intuitive. I say a equals a plus 1. In mathematics what does it mean? This means you  can cancel a and a and 0 becomes equal to 1, which means this does not make sense in mathematics  or the conventional way in which we have learnt algebra, this statement really does not make  sense, but in computer science this is the most frequently used programming statement. This simply means for the value of a, you take the existing value of a and add 1  to it, as simple as that, the best way to see how something works is to execute the program  and then see it, so I have typed this program, it will of course, print the value of a here and  then I do something here and then print, let see what that something results in. It tells you  11, which means the value of a right now is 11. Initially it was 10, now it is 11. Now, if you print a once more, it will continue to stay 11, you see a is 11.  Print a once again it says 11. So, let us do a small modification to this, in between can  you guess what is going to happen if I do this, you have guessed it right, it is a very simple  program which displays 10 increments and then displace increments is adding 1 to it, that is  called incrementing in computer science. So, a equals a plus 1 and then even in real life  incrementing means going one step up, correct? So, you have 10, 11, 12 and 13, pretty simple. These are called variables where you instead of typing directly here as 10, you could do this, you  could also do, a equals 10 and then say print a, as simple as that. So, now let me try writing a small piece of code as and always, I will write the code  and I will let you guess what this code is doing. I say print enter a number what will this display as I execute, it just asks print enter a number, you can see the output this side you get enter  a number this side and that is it empty nothing else, so what you should do is you should let  your user, I mean, you enter a number here. How is that done? Just concentrate, it is  a very quick command, it goes like this, that is, you may have to remember this, what  exactly this does, we will discuss later, but then this will do the required magic look,  the cursor is waiting for you to enter a number. When you enter some number here, and  then press enter, the program ends. Now, what I will do here is I will say  print n here . Can you guess what this does? Firstly, it says enter a number and then  waits for this line to happen, this line in Python stands for please ask the person to  input something, convert that to an integer and then assign it to n . When I say 10, it assigns the value 10 to n and then it prints  n. Let me say it prints n plus 1, and then prints n plus 2 and print n plus 3 and so on. I execute this remember it says; let me say 100, as you can see it displays 100, 101, 102,  and 103. Exactly what is happening here? You may be a tad bit confused on what is  this int here. I will come there soon. It will be very clear to you in a minute s time."
1,5,Video,L1.5: Variables and Input Statement,https://www.youtube.com/embed/ruQb8jzkGyQ,"Hello Python students. In this lecture, we will see two new concepts, namely escape characters and use of quotes supported by the Python language. Let us start with escape characters. For example, I want to print a statement like, It s a beautiful day. As you can see, I have started with a single quote and I have end this particular string with a single quote, which is a valid syntax for a print statement. Let us execute. It says invalid syntax, because over here, It s has this apostrophe and computer does not differentiate between this apostrophe and the single quote, which we usually use to start a string or stop a string, because of that, a computer starts a string with this quote and ends it with this particular quote which is actually the part of that sentence. Now the question is how to solve this problem. One easiest solution is to make it, it is and it will work. But I do not want to do that, I want to keep it like this and this particular problem or this particular error can be fixed using escape character. Escape character is a mechanism which allows us to add those specific characters or those specific symbols in a string in print, which usually we cannot do, as you can see over here, with this single quote. Escape character is written using a backslash followed by the character, which you want to insert in that particular string. In this case, I want to insert a single quote. Hence, I should use backslash before that single quote. As you can see, as soon as I insert a backslash, even the color of that particular statements changes immediately. Now we can observe this backslash followed by a single quote has a different color, because now, these two characters are not considered as separate characters. Computer will translate this particular character as a single entity and it will replace it with a single quote as we want it, just like this. It s beautiful day, it s a beautiful day and this particular character is referred as escape character. Let us try one more example, print. Now, instead of single quotes, I want to use double quotes as we have seen earlier, with respect to print, it is absolutely okay to use double quotes instead of single quotes, we are from IIT Madras, once again computer rates it is starting of the string and this double quote as ending of the string, then it is not able to process this particular term IIT in between followed by starting of a string and ending of a string. Because of this computer is giving us an error, which says invalid syntax, this escape character will rescue us from this particular invalid syntax error, backslash followed by double quote, once again, backslash followed by double quotes. Now we are getting the expected output, we are from in double quotes, IIT Madras. This is related to single quotes or double quotes. What if I want to do something a little bit different than this? For example, print My name is Omkar space, I am from Pune. If you print it, it will print correctly. But what if I want to give additional space between these two sentences? Currently, there is only one space in between these two sentences. But I want to separate these sentences even further.The simplest way, could be to add more spaces, but it is not a good practice. So what to do, usually we use tab to give these extra spaces. But how to use that in the Python language? Let us retain this quote and copy it. Instead of this space if I use something like backslash t, t stands for tab, if you can observe the last two lines of the output here, there was only single space. But now you can see more gap between these two sentences. If we add one more t over here, it will put more gap between these two sentences and now we do not even have to give multiple spaces between two sentences. So this particular escape character is called tab. Now there is a sufficient gap between these sentences. But still, I am not happy with this particular quote. I want to print these sentences on the different lines. A straightforward way is to remove this particular sentence from here and add it as a fourth print statement.But we can avoid that by placing one more escape character called backslash n. n stands for new line. Let us execute this quote. Now you will see the first sentence is getting printed on the third line whereas next sentence is getting printed on the fourth line in the output even though these two sentences are actually written as a part of same print statement. This is happening because of this specific escape character called backslash n, which refers to a new line. Before moving to the next concept let me give you a small exercise, let us copy these two lines, I will change the single quotes to double quotes and remove this escape characters involved. Similarly, I will make these single quotes and remove this particular escape character. Oh, there is a spelling mistake here. That is not important part. The exercise is, I will not execute these two lines, it is up to you to execute these two lines, see the output and figure out why the specific output is coming like that. This is very important concept of strings. But as it is very simple, I am leaving it up to you guys to study on your own. Next part of this particular lecture is use of quotes supported by the Python language. We have already seen the use of single quote and double quote for strings; x is equal to single quote this is a string, y is equal to double quotes, this is also a string, print x print y. As expected, it will print these two strings. So far it was working. But for example, I want to write a third string which says; first line, second line, third line print z. It says EOL while scanning string literal. EOL stands for end of the line, it says end of the line while scanning string literal. When computer starts scanning this third line; starts with z is equal to single code first line. It is still looking for the closing of this single quote which it is not able to find as part of this third line. That is why we are getting this particular error which means this single quote is useful only when a string is stored in a single line. If we divide the string in multiple lines, then we cannot use single quotes. Let us try double quotes instead of that, still we are getting the same error. Now, the question is how to handle this kind of string? In order to store such a string, which is distributed over multiple lines is stored using three quotes. Let us print and try as you can see, it says first line, second line, third line. Similarly, we can keep adding as many lines as we want, fourth line, fifth line and so on. So, now, we know there are three different types of quotes, which are supported by Python language; single quote, double quote and then triple quotes, which we studied just now, and it is used for storing multiline strings. There is one more advantage is using this triple quotes. Earlier we have studied if we use hash, then computer ignores that particular line from execution, it did not print x and y, it printed only the variable z, but ignored variable x and y which we printed in line number 8 and 9 because the use of this particular character hash. As we know hash is used to comment a particular quote, which means that particular line will be considered as a comment, not a part of Python program. But what if I want to give a comment, which occupies more than one line, I can always say, comment 1, comment 2, commend 3 and so on and it should work. But adding this hash every time is not optimum solution. The similar problem can be solved once again using these triple quotes. Because once again, whenever we use triple quotes, it becomes a comment in Python. So today, we have studied a new type of quotes called triple quotes and they can be used for two different purposes. First; to define a multiline string and second to give a multiline comment. Thank you for watching this lecture. Happy learning!"
1,6,Video,L1.6: Variables and Literals,https://www.youtube.com/embed/tDaXdoKfX0k,"Hello Python students. In this lecture we will see variables and literals. In order to demonstrate these concepts, we will use a Python code which is familiar to you. This is a similar code which we saw in the previous lecture. Type your name, Sudarshan, type your location, Mysore, then we will print message, Hello Sudarshan, how is the weather in Mysore? Then the next question is what is your age. Let us say 40. Good to know that you are 40 years old. Before moving to variables and literals let us see is it necessary to have print and input as two separate commands or can we merge them together? To answer that question first we have to understand what both these commands are doing. A print command is only printing a message, whereas this particular input command is taking the input from the user and storing it in n. This printing a message and taking a input can be combined together. The same message we can place inside the brackets of input command and we can remove this print. Let us execute, type your name, Sudarshan, type your location, Mysore, Hello, Sudarshan, how is the weather in Mysore. What is your age? You say 40. Good to know that you are 40 years old. Still we are getting the same output. This is how we can merge print and input together where we are displaying the message along with the input statement itself. Now the next question is is it necessary to have the name as Sudarshan, location as Mysore and age as 40 or can we change the values. Let us try it. What is your name? Omkar. Type your location, Pune. Hello, Omkar, how is the weather in Pune? That works. Let us see whether next statement works. What is your age? Let us say 30. Good to know that you are 30 years old. Which means the same program executes perfectly with same messages even though the values are changed. Now that brings the next question How that happens? There is something called as variable, for example, this n or this p or this age, all these three are variables; which means their values can be changed, they are nothing but a container where we can store different values. Let us try to understand it with a different example. Let us say name is a variable. Now as per first program the name was Sudarshan, but now as I have mentioned name is just a variable, we can change the value which is stored in variable name from Sudarshan to Omkar. The name time we can also change it back to Sudarshan, which means variable we have used over here can store a different value as we go on. Similarly, age can be 40, it can be changed to 30 and so on. So, in this case the name or the age are referred as variables whereas these names Sudarshan, Omkar or the values 40, 30 are referred as literals. Literals are the actual values which are stored inside a variable. Variable can store different literal values and they can be modified as per the requirement. The same age can be modified like this, age is equal to age plus 1. This particular thing is possible but if we try to execute something like this, then it will not work. Because as per this particular line number 6, what we are saying, take the latest value of age which is 30, add 1 into it and store the updated values in variable age. Which means at this particular point the value is 30, then we did 30 plus 1, and now the updated value is 31. But if you come here we cannot say 30 is equal to 30 plus 1. Hence, you can conclude the literals can be used only on the right hand side of the equal to sign, whereas variable can be used on either sides of the symbol equal to. This particular difference between variable and literal leads us to a new question when to use variables and when to use literals? Let us write one Python program which will demonstrate the use of variables and literals. You observe and tell me what happens in this particular code. Let us see what we have done over here, r is equal to int of input of enter the radius of the circle, area is equal to 3.14 multiplied by r multiplied by r. Print area of the circle with radius r is area. First let us execute this particular program, then we will try to answer our previous question. Enter the radius of the circle, let us say 5, area of the circle with radius 5 is 78.5, we are getting the output but still the question is when to use variable and when to use literal. The answer of this question is in this second line over here. The answer is we use r as a variable, area as a variable but the value of pi as literal, because value of pi will never change, whereas radius of a circle might change, and with respect to that area will also change, which means we can execute this program again. And instead of 5 now we can enter 15, which will give us a new area value which is 706.5, irrespective of the radius of the area the value of pi is always 3.14. We will use variables only when there is a possibility that the value which is being stored make change and when we are sure that the value is not going to change we will literal. Similarly, in previous program we used name as a variable, age as variable because those two values may change from person to person, but over here value for pi will always remain same.Thank you for watching this lecture. Happy learning!"
1,7,Video,L1.7: Data Types 1,https://www.youtube.com/embed/8n4MBjuDBu4,"Let us say we declare n equals 10 a  variable n and then print the value of n. The output will be as expected  as you see the number 10. Assuming I take another number, let us say r  equals 6.3 and then print r, obviously it will print first 10 and then will print r. Now, the  point is what if I said s equals, please note sudarshan, and then I will print s as well.  So, you see what is happening here? Here is a number without any decimal value,  here is a number with a decimal part. So, it is not just an integer, it  is a decimal, it is a fraction, 6.3, and then here this is neither an  integer nor is it a decimal number like this. This is a string, a name. I say print s and  sudarshan gets printed. Now the point is what we may want to note here is let me  explain that with an illustration.  When I say print type of n, you  will see what this type does, you see it says class int, do not worry about  the, I would say it is a very ugly looking output, so with less than symbol, greater then  symbol, the word class and things like that,  but all that it says is it is an integer  type number in n. What if we said print type  r, executed, it says class float and then,  so let me just write this for clarity.  I will say the type, n is of type, let us say n  is of type, then I say type r, make sense, r is of  type r. So, mind you the letter n  here is not a variability, it is just,  I am asking the computer to print the whatever  is inside the code, this n is not the value  10 here, this is simply the letter n, which for  reference let me just run this and show you,  it will say n is of type class  and r is of type class float.  And then I say print s is of type,  type s and I will execute this,  you see what happens, s is of type str,  we have seen this somewhere before.  So, str is string. What exactly does it mean? What  is int here, what is float here, what is str here?  You never specified that anywhere here, you went  ahead and said n equals 10, r equals 6.3, s equals  string sudarshan.  But the computer automatically called  this as int type, integer, called this  float, the word float simply means  something that is more than an integer,  10.171, now that is a floating point, it is called  a floating point number. So, in a first course in  computing you will study all these things, I  am sure you did if not you can always look up,  it is a very easy thing to understand. Floating point representation of a number  is the way a computer stores a  number that is not an integer,  it stores in a very, it is a little too technical  to get in right now, but just assume from my side  that this is not an integer and if it is not  an integer, if it is beyond an integer it is  called a float for a computer, it is automatically  calling it a float and this is called a string.  A computer automatically recognizes the  type of data that is being stored.  Why would anyone want something  like this? The answer is very simple  if you were to create a vessel where you will  put your, let us say rice, look at the shape of  the vessel that you use, a jar rather, what kind  of a jar do you use for rice, what kind of a jar  do you use for, let us say to store some liquid,  they appear differently. It is not just for the showy, aesthetics reasons. It is it is simply because the container that holds rice may have  to ensure that it is free from moisture  whereas a container that that stores water  you need not to worry about moisture.So, in a very-very similar way the kind  of data that you store, your computer does  some work internally in allocating some  memory location for it to be stored. Now it cannot simply keep the same location for  all types of data that you may want to store, be it string or be it floating point or be it  integer. It is not the same mantra for everything. The computer recognizes what kind of data you  are storing and it declares the data type, this is called data type and it stores the  values there and says this is the type integer, I will store it in this way only, details aside  with time you will understand it, but given that  you are new to programming all that you need  to know is Python has different data types. So, with this I will end with a small data type  which will be discussed in detail later though, but right now I will give you a  quick glimpse of what this data  type is all about. Let me refresh the screen.  So, what if I said what if I said, remove this, l is equal to let us say 10 comma 20 comma 30. Please note the format here, I give a variable name here and say is  equal to start a big bracket and put some numbers separated by comma and close  the bracket that is it and I say print l. You can guess the obvious, you will see  this same values being printed here. And the best part is when you say l of 0  it displays 10, if you say print l of 1, 0 and 1, it displays the 0th value which is 10, the first value that is 20. And let  us say print of l of 2 will be 30. Now, what are we trying to say here? A computer always starts naming, assume you go to a classroom and you start counting people, you  start with here, this fellow is the first person, he is the second person, third person, fourth person, we humans start with 1, 2, 3, but a computer generally starts with 0, 1, 2. The reason is a little technical we will get there sometime, but then as of now you please assume  that a computer always starts with 0, does not start with 1. The first element here is called the  zeroth element, then the first element, and then the second element and so on. So, if I were to  have more numbers here, let us say 68, 720, 732,you can put whatever you want, and then you say  print of l of 3, you will get 10, 20, 30. And then the l of 3, which is the fourth element here,  which is 68 and so on, this is called a list. So, let us see print type of l. What kind of data  is this? Is this the jar that contains rice or is this a jar that contains a juice or a jar that  contains sugar? The computer stores this as what? Class list. It calls it a list. It has a very  different mechanism, very different way in which it stores, but that is not important for you right  now. All you need to know is Python has different data types. By data types we mean it has a knack  to store what kind of data in what form. Let us revise whatever we discussed so far, if  you say n equals 10 this becomes an integer, if you say r equals some 6.9, it becomes float,  as I said, let us try printing these things, print n, print r and then we discussed  another thing, the last thing was a string, s equals let us say India and when we  say print s, this prints the values, the first one was type, but what we wanted  was type, so I will change this to type here, type, and then let us say type. And you know the obvious will happen. It is throwing an error simply because I did not close  the brackets. Let us try closing the brackets, now it says the first one is a list, second is  an int, third is a float, fourth is a string. So, let me try showing you something  and leave it as an exercise for you  all to figure out what is happening. What will happen if I were to type, type of l of 2? So, let us say print l of 2 and there is a  print type l of 2, and I delete the rest, I remove this also. Guess what will happen if I execute  this. I will execute and show you and I leave it to you to realize what is happening here. So,  with this we end this topic of data types. I hope it is very clear. Do not break your head much. All  that you need to know is computer has a different way to handle different types of data that you may  want to use in your programming show. Thank you!"
1,8,Video,L1.8: Data Types 2,https://www.youtube.com/embed/xQXxufhEJHw,"Hello Python students. In last lecture we saw something called as data type. Each data element has a specific data type, which represents which category of data that particular value belongs to. For example, 10 over here is of type integer, 5.6 is of float, whereas value India is of type string. A data type of any variable can be checked using a command called type. Let us print type of i, type of f, and type of s. As expected it prints int, float and string. Now in this particular we will introduce one more data type called Boolean. Let us add one more variable B1. Now this particular data type has only 2 different values, one it is True, other is False. Let us say B1 is equal to True and B2 is equal to False. Let us print B1 and B2. Let us execute this particular program. As expected the data type for variables B1 and B2 is Boolean. This is a different kind of data type where any variable created using this particular data type can hold only two different values, which is True or False. And notice carefully, the letter T in True and letter F in False has to be capital otherwise it will not be considered as Boolean. Now as we have studied four different data types let us try something different which is data conversion from one data type to other. First let us start with integers. Let us look at this particular code, value 5.7 is of type float, but we are explicitly telling the computer to convert this 5.7 to integer and then store it in variable a. Similarly, over here, 10 is a integer but it is currently enclosed in single quotes, which means it is string and we are asking computer to convert this string into integer and then store it in variable b. Computer will convert 5.7 into integer, string 10 into an integer and ultimately variables a and b should be integers. Let us print the values of a and b, also the type of a and type of b, and let us see how it works. As you can see value of variable a is 5 and type is integer, whereas value for variable b is 10 and type is integer. In the case of conversion from float to integer, computer will only take 5 and store it in a, whereas this 0.7 part will be ignored. This is how we can convert a float or a string into an integer. Now, equal to let us look at similar type of conversion from integer and string to float. Let us look at this particular float, where 9 is integer and 5.3 is a string, but we are telling the computer to convert both these values from integer to float and then from string to float. Let us execute the code. As expected the original value 9 got converted to 9.0 and type if float, a string representation of 5.3 got converted to its float representation, which is again 5.3, but the type had changed to float. This is how we can convert values from integer or from string to its equivalent float representation. Now, let us see how to convert values of type integer and float to its equivalent string representation. Once again this 9 is a integer and 5.3 is a float but we are telling the computer to convert this 9 to a string, also 5.3 to a string. Let us execute the code. As expected we got the output as 9 and 5.3, but the type has been converted from integer to string and then from float to string. This data type conversion is generally referred as type conversion or type casting as in conversion from one data type to other data type. If you have noticed so far we are trying convert values between integers, floats, and strings. But we have not discussed any type conversion related to Boolean data type. Let us see type conversion can be done from integers, float and strings to Boolean data type. Let us look at this particular code where we are trying to convert three different integer values to its equivalent Boolean values, Boolean of 10 and 0 minus 10. Let us first execute this code and then we will see how particular output is coming. Class or type of variables a, b, and c is Boolean but if you observe the values then you will notice there is some difference. It says True, False and True. Value for variable b is coming out to be False, whereas values for variable a and c are True. This is happening because whenever computer converts an integer to a Boolean, all values except 0 are consider as True whereas 0 is the only value which will give us Boolean representation which is False. That is the reason 10 as well as minus 10 are getting converted to Boolean value True, whereas 0 is converted to Boolean value False. Now, let us try the similar thing with a floating point value. Now let us look at this particular code where we are converting values from float data type to Boolean data type. Let us execute, once again a data type has been converted from float to Boolean in all three cases whereas values for variables a, and c are True but for variable b it is still False, because 0.0 is nothing but 0 only. And as we have mentioned earlier Boolean representation of 0 is always False. Other than that for all other positive as well as negative numbers irrespective of integer or float, we will get a Boolean representation as True. Now, let us see what happens when we try to convert string to Boolean. Let us look at this particular code block. India, 10, minus 10.4 as well as 0 all are strings. We are trying to convert all these string values to its equivalent Boolean representation. Let us execute the code and see what kind of output we are getting. All data types are Booleans and all values are True. Now even in the case of 0 it is given value True, because in this case 0 is neither an integer nor a float, here 0 is enclosed in this single quotes which makes it a string and string representation of Boolean is always True except for one condition. Let us see what that condition is. e is equal to Boolean of empty string, here we are simply giving single quotes and insidethose single quotes we are not writing anything, which means it is an empty string and a Boolean conversion of empty string is False. As you can see over here in last line of the output, the class is Boolean but the value is False. All strings are converted to Boolean with value True except an empty string. So, in order to summarize this particular lecture, we saw one more new data type called Boolean and also we studied type conversion within integer, float and string and at the end we converted all different types of integers, floats and strings to its equivalent Boolean representation. Thank you for watching this lecture. Happy learning!"
1,9,Video,L1.9: Operators and Expressions 1,https://www.youtube.com/embed/8pu73HKzNOE,"So as anyone would expect it is only obvious that  when you say n equals 3 plus 2 and then print n, it prints 5. If you were to say 3 times 2,  it prints 6. Then when I say 3 times 2.6, it prints the actual number 7.8.  Fine, perfect. So, what about let us say a equals 1, b equals 2 and then I print n equals a plus b. This again  behaves naturally as we expect. If we include floating point numbers again  behaves as we expect, but then if you were to simply say a equals sudarshan, b equals India  and say n equals a times b, let us see what gets stored in it. It throws an error obviously  because it does not know how to multiply these two strings, that is when we may want to  recollect our discussion on data types. This is of the type string,  this is another type string, it does not understand, your computer does not  understand what is into of two strings, but if it is a number it readily does the multiplication  or let us say even division for that matter, correct? But then if I say a plus b, what is  your guess? Do you think it will throw error? Let us check, not at all. What it does? It simply  mixes these two strings, mixes as in puts it one next to the other, this is called concatenation  in English and more so in computer science this is very often used, they call it concatenate, put  two words together, one next to the other. So, whenever you say plus of two strings, the  computer seems to understand that. Now you can ask me this question why is it that  the computer understands plus and not minus or subtraction, I mean, subtraction or  multiplication? It is programmed that way, it is for convenience that they use plus  for concatenation of two strings. So, let us go ahead and do something  more here, let us say a equals 1, 2, 3, let us explore, what if b becomes 7,  9 and 15, what will a plus b be? a plus b simply gets, this is called union in mathematics.  What is union? Union is simply, you take this list and this list and put them together.  In fact, it is not even union, it is simply put them together, make them, make it together.  For example, if you had another 2 here, it will include that 2 too here as you can see. Union means there should not be a repetition, that is the idea of sets that you would  have studied in your high school days, anyway let us not get there, it is not required  here. All that this does is simply puts them one next to the other and creates a new list.  So, now you understand a data type matters when we say an operator like plus, when we  put what is the data type of a and b matters for the computer to give the right output? So, with this let us go ahead to the next idea, which is let us say a equals 11, b  equals 15, I say n equals a by b, I say print n. Again as expected it prints the floating point, the float number. Float is  something that is not integer as I keep saying, so it is 0.7333. Fine, so far so good. Now, what if we were to simply say n equals, let us say 10 plus 13, again does the obvious  here, but then what if I said 10 plus 13 times 2. What is it that you would expect here? I would expect this to be 10 plus 13, let us say it goes from left to right, first it does 10 plus 13,  this becomes 23, and then multiplies 23 into 2, which is 46, this is my guess. You comment using hash here, my guess is n will be how much, 10 plus 13 is 23 times  2 is 46. Let us see if this is the answer. No, this is not the answer, the answer  seems 36. Why? That is because your computer does not do it the way you expect it to do, it  does the way it was programmed to do. Internally it was told to calculate such expressions,  arithmetic expressions in a particular way. And that particular way is that whenever  you have a plus and a multiplication, give priority to multiplication, which means  come immediately to the place where there is into, the star and multiply  these two numbers, you get 26, and then add 10 to it, you get 36, and that  is precisely what is being displayed here, not the typical first guess that I did,  10 plus 13 is 23 times 2 is 46. No, it first comes to into and then does plus. This concept is called operator precedence, let me just comment that too, the expected answer  was incorrect, the correct answer turns out to be 36 that is due to what is called the operator  precedence. It is a very complicated term for something as simple as some operators, by operator  we mean into, plus they all are called operators. Some operators are precedence over the other. They are executed first over the other. This is an important concept, in all programming classes  they teach this, although in my personal opinion this is not very important. For a simple reason  that we can always do what it takes for us to simply put braces, brackets and then tell what  you want. Here the moment you put your brackets, 10 plus 13 will get executed first, 23,  into 2 is 46, it has to be that. Now the computer cannot do into first and then do  plus next. It did that when no brackets were there like this, but the moment you put brackets the  computer understands what you expect it to do, it will indeed show 46 as you can see here. So,  now you understand what are operators, your plus, your star, your minus, your division,  slash, all of them are called operators and when you put them in tandem, when you put them  together the way we did before, how was that. Let me put that, when you put them continuously  like this and confuse the computer, the computer indeed does not get confused, it  does what is called operator precedence rule with which it first does the multiplication  and then does the addition. As I repeat do not break your head so much about this concept, it is  just that you need to know what happens when you give an arithmetic expression like this. What is more important is trying to code and get the output that is expected, rest  are all just details. So, let us see more about these operators and operator precedence  and arithmetic expressions in our next video."
1,10,Video,L1.10: Operators and Expressions 2,https://www.youtube.com/embed/Y53K9FFu97Q,"Hello Python students. In last lecture we saw  operators and expressions. We will continue from there and see some more different types  of operators. In Python operators are divided into three major categories, first, arithmetic  operators; second, relational operators and third, logical operators. Let us start  with arithmetic operators. As you can see we have these many arithmetic  operators in Python. Addition, subtraction, multiplication, division,  these four operators are familiar to all of us. First, let us see these four operators and  then we will move to remaining three operators. Addition 2 plus 3, subtraction 9, so  on, multiplication 5 multiplied 4, division 7 divide by 3. Let us execute the  code as expected we are getting the output as 5, 8, 20, and 2.333 for the division. Now we  will focus on remaining three operators. Out of that the first one  is called floor division. This particular operator looks similar to division  operator, but instead of one forward slash, we have two forward slash in floor division operator. Let us first execute the code, then we will see what is the difference  between division and floor division. As you can see over here the output  for division operation was 2.333, which is a fractional value whereas for floor  division it is an integer value and that is the difference between division operator and floor  division operator. Whenever we divide 7 by 3, we get some fractional value, but when we  divide 7 by 3 using a floor division operator it provides us only the integer part of  that division, which is 2 in this case. The next operator is called modulus operator. This  operator is also related to division operation but it is different than division or floor division.  Let us see how it works? This particular operator is represented using this percent symbol, 7  modulo 3. Let us execute first, output is 1. We are getting this output as 1 because  whenever we divide 7 by 3, the remainder is 1, division operator gives us the  output in fractional value. Floor division divides the numbers and  provides only the integer quotient part of it whereas modulus operator provides the remainder  after the division. Now let us move to last operator which is exponential operator which  is represented using this star star symbol. Exponential 6 raised to 2. As expected  the output is 36, that is because 6 raised to 2 as in 6 power 2 is  36. All these different set of operators which you can see on your screen  are called as arithmetic operators. Now let us move to second set of operators.  These operators are called relational operators, greater than, less than, greater than equal  to, less than equal to, double equal to, and not equal to. If you remember you have studied  all these operators in your previous course Computational Thinking. Let us go through  these operators one by one to demonstrate how they are used in Python. Let us say print 5 greater than 10, output is false, because 5 is not greater than  10, if we invert these two values and make it 10 greater than 5, then the output should be true,  as you can see this greater than operator is only giving output in terms of Boolean value which  can be either false or true. Let us execute the same code by changing the operator from greater  than to less than, now 5 is less than 10. So, this statement should be true whereas 10 is  not less than 5, so this should be false. Let us see, true and false, which is what was expected.  Now, the next operator is greater than equal to, now let us see what is the  difference between greater than and greater than equal to. Let us make it 5  greater than 5 and 5 greater than equal to 5. Let us execute and see the difference. In first  case 5 is not greater than 5 because they are equal, that is why the output is false whereas  in second case 5 is greater than equal to 5, in this case the greater than part may not  be true but this equal part is true because of which output we are getting as true. Similar is the case for less than equal to symbol. Let us try it less than less than equal to. Let us  execute, same output, because once again 5 is not less than 5, but 5 is less than equal to 5. Once  again this equal to part is true that is why we are getting output as false, followed by true.  Next symbol is double equal to, let us use that, 5 double equal to 50, 5 double equal to  5, let us execute and see the difference. Now the output which we are getting is false  followed by true. The first we are getting false because 5 is not equal to 50. The  number 5 is not equal to the number 50. At the same time the number 5 is equal to number 5  that is why we are getting true in second case and false in first case. This double equal to operator  compares first operand with second operand and if they are equal, then it prints the value true and  if they are not it will print the value false. The last operator is not equal to operator, which is  exactly opposite of this double equal to operator. Over here if we use not equal to 50  and not equal to 5, then let us see what happens to the output. Now we are getting true when we are saying 5 not equal to 50, which means  this not equal to operator will compare operand one which is 5 with operand two which is 50, and  if they are not equal then it will print true, whereas if they are equal then it will  print false. As you must have noticed with respect to relational operators the  output is always Boolean value, which means output of any expression using relational operator  is always going to be a Boolean value. Next set of operators are called as logical  operators. These are the logical operators and, or and not. Once again we have seen these  operators before, but let us explore them using Python. First let us see the and  operator print true and true, true and false, false and true, false and false. Over  here we are using this and operator with all four possible combinations of true  and false. Let us check the output first. True, false, false, false, we are getting this  output because true and true evaluates to be true, in all other cases the output is false, based on this we can conclude that when  the and operator gets both its operand as true then and then only it gives the output as  true. In all other cases the output is false. Now, let us replace the and operator with or  and see the difference in the output. Let us execute first true, true, true, and last  is false. Now, in case of or operator expects at least one of its operand to be true,  if that is the case the output is true otherwise the output will be false. Hence,  in first case both operands are true, so output is true, the first operand is true, in  third case the second operand is true, that is why in both these cases as well the output is true,  whereas for last case both the operands are false as we cannot find even a single true on either  side of our operator the output is false. Now, let us see the last operator which  is not operator. Let us execute this code, output is false followed by true, not of  true is false, whereas not of false is true, which means this not operator simply inverts  the Boolean value from true to false and from false to true. But you must have observed one  difference in these two print statements. In first print statement I have used not  followed by a bracket inside which I have used a Boolean value true whereas in second print  statement I have used not operators followed by  false directly without using any parentheses,  still we are getting the expected output which means the not operator can be used  either with brackets or without brackets, still we get the expected output. Thank you  for watching this lecture. Happy learning!"
1,11,Video,L1.11: Introduction to Strings,https://www.youtube.com/embed/sS89tiDuqoM,"We did see more on strings, but let us revisit  strings now and start with declaring a variable s as let us say coffee and then t will be, what goes  good with coffee, maybe cake or better even bread, I want something long word. So, you all know what  happens when I print s, will be printing coffee, when I print t I will be printing bread, correct, coffee and bread and as we discussed when we print s plus t it will concatenate,  that is probably a new word for you all. It will concatenate, which means it will place one next to the other and display coffee bread.Right,fine now let me take  you all to one level deep into strings, so the next level would be to understand what  will happen if I were to simply say s of 0, even this we discussed, it will show you the first  letter of s, s of 1 second letter of s, if I were to say s of 2, third letter of s and so on.  But then what I did not tell you people is that if you specify s of 1 here and then  3 here it does something else. Let us see what it does? It is showing 'of'. What exactly is it doing? It is taking, it is starting from the first number 1  s of 1, it is starting and going up to 2, it does not go up to 3, it goes  one less, s of 0 is c, s of 1 is o right, s of 1 is o, and s of 2 is f, so  it starts from s of 1, and displays this, what if I said 5 here, it will start from 1, s  of 1, 2, 3, 4, it should display so much. You may be wondering why does not it go up to  5 that only makes sense for it to go up to 5, for some reason Python is created this way.  There will be many such questions in your mind. Why did Python do it this way? The answer  invariably is always, it was their choice; there was probably some reason that we may not know  today or maybe you can Google it up and you may know why exactly they have done it like this. But by the way there are very nice reasons why Python starts with 0. So, does your C language.  Anything before c with the best of my knowledge would always start with 1, the list would  start with 1, the string would start with 1, you would refer it as s of 1 for c, but in Python  you start with s of 0 for the first letter. So, what will this output? This should output  start from 1 go up to 5 minus 1, which is s of 4 this should be the output. Let us see if my,  yes, my prediction is right, it goes up to 5, if you let us say start from 3 and go up  to 5 what will happen, 0, 1, 2, 3, and go up to 5, 5 minus 1 which is 4, 'fe' should  be displayed that is indeed displayed here. So, you sort of, you can slice the strings as  you can see. This is called string slicing. So, let me go ahead and then play  around a little more with the, with these two words, I said s plus t will give  you concatenation as explained before, s minus t will throw up an error because it has no clue  what to do with subtraction of two strings. Now, to put everything in context I will type a  nice piece of code and I will let you think on what exactly will this output. What is s? s is a  string 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 and what is a, a is s of 0. What am I trying to do here? You  probably are confused, you always type something on the right side which is assigned to the left  side right, you never put another variable here on the left side, this is indeed okay, you  can put whatever you want on the right side, its value gets assigned to the left side. It will take some time for you to get used to it, but commonsensically speaking a is now assigned  s of 0 which you would have guessed is this 0, b will be assigned s of 1 which you would  have guessed is 1. Now, when I say print a and then print b right, you will see the  obvious happen here. It is taking some time, but what do you expect to see. You will see the  value of, this is a usual problem with Replit. I do not want to you know edit this part, but I  want you all to take this warning message that it, if it so happens that it says fail to  connect, it means there is some problem  with your internet, you may have to wait  for a second and then it gets connected, you see the output here, 0 and 1. Perfect.  If I were to say s of let us say 4 and 7, it will say 4 and 7. Print a s of 4  is 0, 1, 2, 3, is indeed 4 itself,  the number 4. So, it will say this. Now can you all guess what will the output of this be, a plus b? Do you expect it to say  11? Let me see, I would expect as a layman, as a person who is new to programming, I would  expect this to be 4 plus 7, 11, but if you have watched carefully from what we were discussing a  minute before, you will say no it will not be 11, so let us see what the answer is, as I  execute it I see it is 47, 4 plus 7 is 47. But why on earth would it say 47? That is because  as you can see a here is actually a string, a one letter string, a character, b is another string, plus understands that it should take this string and this string and place them  one next to the other, the concatenation as I have been talking to you people about, it  will not see them as numbers, unfortunately and I have been telling you people computer does  exactly what you instruct the computer to do. It does not have the intelligence to add things  up if they are numbers. So, what do we do to make these make 4 plus 7 equals 11 here? That is  going to be pretty simple, all you need to do is when you say a equals s of 4, you must say convert  that to an integer, when you say b equals s of 7, you must say convert that to an integer, a very  simple trick. And now finally when you say print, it will say 4 plus 7, simply because the plus  here is acting on an integer a and an integer b, unlike before where both of them were strings. If they are strings, plus this addition of strings means place them one next to the other, when  you put plus between two numbers, it means do addition, the old school style, whatever you  were doing in your school, 7 plus 4 was 11, but if there are strings, 7 plus 4 will be 7  4 placed next to each other. What is the moral of the story? The more the story is the way your  computer sees things depends on how you store them and computer stores in its own way  unless or otherwise specified. You may have to specify in what  format you want this to be stored just so that you can do the necessary operations  on it. I hope things are clear, if not you may have to practice little bit on what I said just  now. I will now try to give you a small program and I leave it to you people to figure  out what is the answer for this code. What if I said a equals s of 3 and  b equals s of 8 and I will print, let us say, I will say n equals a  plus b and then convert this to int, convert this to int, and then I will  print n, what will be the output? The output is 38 as expected, correct? But  if I were to put int here and an int here what is the output? I will remove the int  here. What is the output? The output is 11. Simply removing the int here  will give you some output and retaining the int there and then the  output will be something else. So, you can you can redo this code all by yourself and  try to understand the motivation for data types."
1,12,Video,L1.12: More on Strings,https://www.youtube.com/embed/e45MVXwya7A,"Hello Python students. In last lecture we saw various concepts related to strings, like concatenation, indexing, and slicing. In this lecture we will see few more concepts related to strings. In the first concept, it is called replication. Let us declare one variable s as a string, value is good, print, so far we have seen what happens when we use a plus operator or a minus operator with string. Now, we will see what happens if we use multiplication operator with string. s star 5. So, what you think? What should be the output of this particular Python program? Will it encounter an error or will it print something? Let us try it. It prints the string 5 times one after the another, which means it is like an concatenation operator where same string is concatenated with itself 5 times. Let us take it one step further, instead of s if we make it s of 0, now what will be the output? Let us see, 5 times the letter g because s of 0 is g. This particular feature of string data type is called as replication where a string or a character from a string replicates itself based on the number with which it is multiplied by. Now the next string property is string comparison. Let us write one small piece of code. x is equal to India, print x equal equal to India and print x equal equal to India but over here this i is small. So the question is what will be the output of this kind of comparison. A letter being capital or small, does that make any difference or still it will consider the string India as same which is like variable x. Let us execute the code, first is true, obviously because we have I' as capital, but in second case it is false, which means a single letter change from capital to small letter is considered as not equal, therefore x equal equal to India with small i is resulting into false. Let us see some more examples where string comparison is happening. Print apple greater than 1 and print four less than 10. What you think, what will be the output of such string comparison? First, even is it possible to compare strings like this or will it result into an error? Let us figure out there is no error. It shows some output false and true, now let us see why false and true. First when we compare apple greater than one, it says false. If you see a string apple is longer or has more characters than the string one, still it is not greater. Similarly, in second case when we compare 4 less than 10, it says true. But we know 4 is not less than 10. But that is true when we compare 4 and 10 as integers, here the word 4 and 10 are strings. Hence, the comparison operator works in a different manner. Let us see how these comparison operators greater than and equal to works with strings. A computer starts the comparison process character by character as in the zeroth letter of first string which is a in this case will be compared against the zeroth letter of second string, which is o in this case. That means a computer will compare whether a is greater than o. As we know in alphabetical order a comes before o, which means a is not greater than o, because of that it results into false. Similarly, in second case the letter f is less than t because the letter f comes before letter t in an alphabetical order, because of that it says true. Now, you must be thinking what happens if first letters are equal. Let us try to have one example where the first letter is equal and see what happens next. Print ab less than az. In this case the first letter a is equal, but the second letter b and z and are different. Similarly, in second print statement first couple of letters are same, in fact, all the letters from second string are exactly identical with initial letters from first string, except the last one character. Let us see what output this particular string comparison gives us? It says true followed by false, which means ab is less than az. This is happening because when the first character is equal computer moves to the next character which is b and z. As b comes before z in alphabetical order it says true. Now, in case of second print statement the first letter as in the zeroth letter of first string which is a, which is matching to the zeroth letter of second string. Same, the second letter which is b, next letter c, next letter d, and then next letter e. All these letters are matching. In first case after e there is one letter which is f, but on the right hand side of that letter than operator there is no letter to compare after e because of that computer end up comparing f with nothing and due to that the output is false because f cannot be less than nothing. Next string concept is string indexing. But in this lecture we will see different kind of string indexing called as negative indexing. Let us declare one string. s is equal to Python, print s of 0, s of 1, s of 2 and so on and the output is t, y, t, h, o, n as expected. This is something we have already done. What if we do something different this time? Instead of giving these indexes 0, 1, 2 and so on can we give negative numbers? For example, minus 1, minus 2, minus 3, minus 4, minus 5, and minus 6, what do you think, what will be the output of this particular Python program? Can we even access minus 1 letter in this particular string? We already know p is zeroth letter, y is first, t is second and so on, n is the fifth letter. Is it even possible to access negative index for a string? Let us execute and check. Yes, it is possible. If you see we are not getting any error. In fact, we are getting the exact letters from the string but this time they are in the reverse order, minus 1 that is showing n, for minus 2 it is showing o, for minus 3 it is h, for minus 4 it is t, and so on, for minus 6 it is showing p, which is the first letter of the string. Which means whenever we do minus 1, it access the last letter of the string, minus 2 is second last letter, minus 3 is third letter from the end, minus 4 is fourth letter from the end and so on. This particular indexing is called as negative indexing. Let us see the next concept related to string. First let us declare one string variable and let us have some very big value again this variable, some random character. Let us try to print s of let us say 100, we do not know whether we have 100 letters in the string or not. The string looks big enough but may not be big enough to have 100 characters. Let us execute and see what happens? It shows an error which says String index out of range , which means we are trying to access the 100th character in the particular string but as per the error it says index out of range, which means the 100 character does not even exist in the given stream, due to which computer cannot print it. Now, the question is if we have such a big string, maybe even bigger like this, still the output is index out of range. In case of such a big string, how to figure out exactly how many number of characters are there in that string so that we will not end up using some index value which is out of range. For that there is one command called as len, which means length, print of length of s. Let us execute and the output is 36. This number 36 represents the total number of characters in this particular string. Now as we know there are 36 characters, which means now we should be able to execute s of 36. What you think will this code execute or still we will get error? Let us see, still we are getting the same error, string index out of range, but we already calculated that the length is 36, still it is giving error. Can you tell me why this particular thing is happening? Because if you remember in Python the string indexing starts from 0, due to which whenever we say there are 36 letters that means the indexes are from 0 to 35, let us make it 35, and see whether we are getting the last character of the string or not? Yes, indeed we are getting the letter f, which is the last letter in that particular string which is the 35th character, which indicates that we can use the index number which is 1 less than the total length of that particular string. In this case the length of string is 36, therefore the highest possible index is 35. Thank you for watching this lecture. Happy learning!"
1,13,Video,L1.13: Conclusion: FAQs,https://www.youtube.com/embed/_Ccezy5hlc8,"Let us get back to our print command and type this statement, as you can see I say print 10, when I execute this I see that 10 is being printed, displayed. Now, look at the small modification that I do. I remove this 10 here, just above the print statement, I say a equals 10, and then I include print a and what does this do? In mathematics we have observed this, we always declare a variable, we say let us call a variable; let us assign the value 10 to it. A computer also sees this as the letter a is assigned the value 10 and you are printing a, which means whatever is assigned to this variable, will be printed here, as simple as that. So, when I execute this I continue to get 10, here as you can see. Now, if I were to say b equals 20 and then when I say print b, let me execute this. I get print a, a gets printed here, print b, b gets printed here, which is 20. So, that is it, pretty self-explanatory. What is the big deal about it? Now, look at this. I will say print a plus b, so here is a plus b and then I say print a into b, I get a into b, which is 200, 10 times 200. Now, let me delete all these things start afresh. I will say a equals 10 as before and say print a, look at this, this is slightly counter intuitive. I say a equals a plus 1. In mathematics what does it mean? This means you can cancel a and a and 0 becomes equal to 1, which means this does not make sense in mathematics or the conventional way in which we have learnt algebra, this statement really does not make sense, but in computer science this is the most frequently used programming statement. This simply means for the value of a, you take the existing value of a and add 1 to it, as simple as that, the best way to see how something works is to execute the program and then see it, so I have typed this program, it will of course, print the value of a here and then I do something here and then print, let see what that something results in. It tells you 11, which means the value of a right now is 11. Initially it was 10, now it is 11. Now, if you print a once more, it will continue to stay 11, you see a is 11. Print a once again it says 11. So, let us do a small modification to this, in between can you guess what is going to happen if I do this, you have guessed it right, it is a very simple program which displays 10 increments and then displace increments is adding 1 to it, that is called incrementing in computer science. So, a equals a plus 1 and then even in real life incrementing means going one step up, correct? So, you have 10, 11, 12 and 13, pretty simple. These are called variables where you instead of typing directly here as 10, you could do this, you could also do, a equals 10 and then say print a, as simple as that. So, now let me try writing a small piece of code as and always, I will write the code and I will let you guess what this code is doing. I say print enter a number what will this display as I execute, it just asks print enter a number , you can see the output this side you get enter a number this side and that is it empty nothing else, so what you should do is you should let your user, I mean, you enter a number here. How is that done? Just concentrate, it is a very quick command, it goes like this, that is, you may have to remember this, what exactly this does, we will discuss later, but then this will do the required magic look, the cursor is waiting for you to enter a number. When you enter some number here, and then press enter, the program ends. Now, what I will do here is I will say print n here . Can you guess what this does? Firstly, it says enter a number and then waits for this line to happen, this line in Python stands for please ask the person to input something, convert that to an integer and then assign it to n . When I say 10, it assigns the value 10 to n and then it prints n. Let me say it prints n plus 1, and then prints n plus 2 and print n plus 3 and so on. I execute this remember it says; let me say 100, as you can see it displays 100, 101, 102, and 103. Exactly what is happening here? You may be a tad bit confused on what is this int here. I will come there soon. It will be very clear to you in a minute s time."
